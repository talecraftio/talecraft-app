from brownie import accounts, CraftTimeLock


def main():
    # deployer = accounts.load('talecraft-deployer', '')
    # print(deployer.address)
    # factory = TokenVestingFactory.at('0x2DAB3390adf79237aF1331bb7Eb4295defE6DA30')
    print(CraftTimeLock.get_verification_info())


{'standard_json_input': {'language': 'Solidity', 'sources': {'CraftTimeLock.sol': {
    'content': '// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.5;\n\nimport "SafeERC20.sol";\nimport "SafeMath.sol";\nimport "Ownable.sol";\n\ncontract CraftTimeLock is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        uint256 amount; // How many staking tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 rewardDebtAtTimestamp; // the last timestamp user stake\n        uint256 lastWithdrawTimestamp; // the last timestamp user withdrew at.\n        uint256 firstDepositTimestamp; // the first timestamp user deposited at.\n        uint256 lastDepositTimestamp; // the last timestamp user deposited at.\n    }\n\n    struct PoolInfo {\n        IERC20 token; // Address of staking token contract.\n        uint256 supply; // supply for this pool\n        uint256 allocPoint; // How many allocation points assigned to this pool.\n        uint256 lastRewardTimestamp; // Last timestamp that tokens distribution occurs.\n        uint256 accTokenPerShare; // Accumulated tokens per share, times 1e12. See below.\n        uint256 totalAllocation; // Total allocation for the pool\n        uint256 totalReward; // Total rewards for the pool\n    }\n    // Basis point base to calculate fees\n    uint256 public constant FEE_BASE = 10000;\n\n    // Reward token instance\n    IERC20 public immutable rewardToken;\n\n    // Address where all fees goes, can be adjusted by the owner\n    address public feeRecipient;\n\n    // Reward token per second, can be adjusted by the owner\n    uint256 public tokenPerSecond = 0;\n\n    // Reward bonus multipliers, can be adjusted by the owner\n    uint256 public bonusMultiplier = 1;\n\n    // The timestamp when rewards starts.\n    uint256 public startTimestamp;\n\n    // The timestamp when rewards ends\n    uint256 public endTimestamp;\n\n    // Pools array\n    PoolInfo[] public poolInfo;\n\n    // Users mapping, poolId => userAddress => UserInfo\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // Array with fee amount (in basis points) for given stage\n    uint256[] public feeStage;\n\n    // Array with timestamp deltas, used to calculate fee stage,\n    uint256[] public timestampDeltaFeeStage;\n\n    event CreatePool(address indexed stakingToken, address indexed rewardToken, uint256 indexed allocation);\n    event UpdatePoolAllocation(uint256 indexed pid, uint256 indexed allocation);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        IERC20 _rewardToken,\n        IERC20 _stakingToken,\n        uint256 _startTimestamp,\n        uint256 _endTimestamp,\n        uint256 _allocation,\n        address _feeRecipient,\n        uint256[] memory _feeStage,\n        uint256[] memory _timestampDeltaFeeStage\n    ) {\n        rewardToken = _rewardToken;\n        feeRecipient = _feeRecipient;\n        startTimestamp = _startTimestamp;\n        endTimestamp = _endTimestamp;\n        feeStage = _feeStage;\n        timestampDeltaFeeStage = _timestampDeltaFeeStage;\n\n        poolInfo.push(\n            PoolInfo({\n                token: _stakingToken,\n                supply: 0,\n                allocPoint: 1,\n                lastRewardTimestamp: _startTimestamp,\n                accTokenPerShare: 0,\n                totalAllocation: _allocation,\n                totalReward: 0\n            })\n        );\n        totalAllocPoint = 1;\n\n        emit CreatePool(address(_stakingToken), address(_rewardToken), _allocation);\n    }\n\n    /**\n     * @dev Updates reward vairables for the pool.\n     */\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        if (block.timestamp <= pool.lastRewardTimestamp || pool.lastRewardTimestamp >= endTimestamp) {\n            return;\n        }\n\n        if (pool.supply <= 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        uint256 toTimestamp = block.timestamp > endTimestamp ? endTimestamp : block.timestamp;\n\n        uint256 multiplier = getMultiplier(pool.lastRewardTimestamp, toTimestamp);\n        uint256 reward = multiplier.mul(tokenPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\n\n        if (pool.totalReward.add(reward) >= pool.totalAllocation) {\n            reward = pool.totalAllocation.sub(pool.totalReward);\n        }\n\n        pool.accTokenPerShare = pool.accTokenPerShare.add(reward.mul(1e12).div(pool.supply));\n        pool.lastRewardTimestamp = toTimestamp;\n        pool.totalReward = pool.totalReward.add(reward);\n    }\n\n    /**\n     * @dev Deposit tokens to DuelStaking for reward token allocation.\n     */\n    function deposit(uint256 _pid, uint256 _amount) external {\n        require(block.timestamp < endTimestamp, "DuelStaking: Deposit deadline");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        updatePool(_pid);\n\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);\n            if (pending > 0) {\n                safeTokenTransfer(msg.sender, pending);\n            }\n        }\n\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\n\n        if (user.firstDepositTimestamp == 0) {\n            user.firstDepositTimestamp = block.timestamp;\n        }\n        user.lastDepositTimestamp = block.timestamp;\n\n        pool.supply = pool.supply.add(_amount);\n\n        pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\n\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    /**\n     * @dev Withdraw LP tokens from DuelStaking.\n     */\n    function withdraw(uint256 _pid, uint256 _amount) external {\n        require(block.timestamp >= endTimestamp, "Withdraw is not allowed yet");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(user.amount >= _amount, "DuelStaking: Withdraw amount exceeds user amount");\n\n        updatePool(_pid);\n\n        uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);\n\n        if (pending > 0) {\n            safeTokenTransfer(msg.sender, pending);\n        }\n\n        if (_amount > 0) {\n            uint256 fee = getWithdrawalFee(_pid, msg.sender);\n\n            uint256 amount = applyFee(fee, _amount);\n            uint256 feeAmount = calculateFee(fee, _amount);\n\n            user.amount = user.amount.sub(_amount);\n            user.lastWithdrawTimestamp = block.timestamp;\n\n            pool.supply = pool.supply.sub(_amount);\n\n            pool.token.safeTransfer(address(msg.sender), amount);\n            if (feeAmount > 0) {\n                pool.token.safeTransfer(address(feeRecipient), feeAmount);\n            }\n        }\n\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /**\n     * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\n     * This has 25% slashing fee as same block withdrawals to prevent abuse of this function.\n     */\n    function emergencyWithdraw(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        pool.supply = pool.supply.sub(user.amount);\n\n        uint256 amount = applyFee(feeStage[0], user.amount);\n        uint256 feeAmount = calculateFee(feeStage[0], user.amount);\n\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        pool.token.safeTransfer(address(msg.sender), amount);\n        if (feeAmount > 0) {\n            pool.token.safeTransfer(address(feeRecipient), feeAmount);\n        }\n\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    /**\n     * @dev Returns reward multiplier over the given _from to _to block.\n     */\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        return _to.sub(_from).mul(bonusMultiplier);\n    }\n\n    /**\n     * @dev Returns pending rewards for user.\n     */\n    function getPendingRewards(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n\n        if (block.timestamp < startTimestamp) {\n            return 0;\n        }\n\n        uint256 accTokenPerShare = pool.accTokenPerShare;\n        if (block.timestamp > pool.lastRewardTimestamp && pool.supply != 0) {\n            uint256 toTimestamp = block.timestamp > endTimestamp ? endTimestamp : block.timestamp;\n            uint256 multiplier = getMultiplier(pool.lastRewardTimestamp, toTimestamp);\n            uint256 reward = multiplier.mul(tokenPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\n            if (pool.totalReward.add(reward) >= pool.totalAllocation) {\n                reward = pool.totalAllocation.sub(pool.totalReward);\n            }\n            accTokenPerShare = accTokenPerShare.add(reward.mul(1e12).div(pool.supply));\n        }\n        return user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    /**\n     * @dev Add pool reward allocation. Can only be called by the owner.\n     */\n    function addAllocation(uint256 _pid, uint256 _amount) public onlyOwner {\n        updatePool(_pid);\n        poolInfo[_pid].totalAllocation = poolInfo[_pid].totalAllocation.add(_amount);\n        emit UpdatePoolAllocation(_pid, _amount);\n    }\n\n    /**\n     * @dev Updates reward multiplier, only owner.\n     */\n    function setMultiplier(uint256 _multiplier) external onlyOwner {\n        require(_multiplier > 0, "DuelStaking: Zero multiplier");\n        bonusMultiplier = _multiplier;\n    }\n\n    /**\n     * @dev Updates fee recipient, only owner.\n     */\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\n        require(_feeRecipient != address(0), "DuelStaking: Zero fee recipient");\n        feeRecipient = _feeRecipient;\n    }\n\n    /**\n     * @dev Updates reward per second, only owner.\n     */\n    function setTokenPerSecond(uint256 _amount) external onlyOwner {\n        require(_amount <= 30 ether, "DuelStaking: Max 30 tokens per second");\n//        require(_amount >= .0001 ether, "DuelStaking: Min .0001 token per second");\n        tokenPerSecond = _amount;\n    }\n\n    /**\n     * @dev Updates start timestamp, only owner.\n     */\n    function setStartTimestamp(uint256 _timestamp) external onlyOwner {\n        require(startTimestamp > block.timestamp, "DuelStaking: Farming has been started");\n        require(_timestamp < endTimestamp, "DuelStaking: Start timestamp should be less then endTimestamp");\n\n        startTimestamp = _timestamp;\n        poolInfo[0].lastRewardTimestamp = startTimestamp;\n    }\n\n    /**\n     * @dev Updates end timestamp, only owner.\n     */\n    function setEndTimestamp(uint256 _timestamp) external onlyOwner {\n        require(endTimestamp > block.timestamp, "DuelStaking: Farming has been finished");\n        require(_timestamp > startTimestamp, "DuelStaking: End timestamp should be greater then startTimestamp");\n\n        endTimestamp = _timestamp;\n    }\n\n    /**\n     * @dev Updates fee stage, only owner.\n     * i.e. [2500,400,300,200,100] = [25%,4%,3%,2%,1%]\n     * must be length of 5\n     */\n    function setFeeStage(uint256[] memory _feeStage) external onlyOwner {\n        require(_feeStage.length == feeStage.length, "DuelStaking: FeeStage array mismatch");\n        feeStage = _feeStage;\n    }\n\n    /**\n     * @dev Updates timestamp delta fee stage array, only owner.\n     * i.e. [0,3600,7200,10800,14400] for BSC 3600 sec = 1 hour\n     * must be length of 5\n     */\n    function setTimestampDeltaFeeStage(uint256[] memory _timestampDeltas) external onlyOwner {\n        require(_timestampDeltas.length == timestampDeltaFeeStage.length, "DuelStaking: TimestampDeltaFeeStage array mismatch");\n        timestampDeltaFeeStage = _timestampDeltas;\n    }\n\n    /**\n     * @dev Sends leftover tokens to the fee recipient, only owner.\n     */\n    function claimLeftovers() external onlyOwner {\n        require(poolInfo[0].supply == 0, "DuelStaking: Not all users has claimed");\n\n        uint256 balance = rewardToken.balanceOf(address(this));\n\n        require(balance > 0, "DuelStaking: Zero balance");\n\n        safeTokenTransfer(msg.sender, balance);\n    }\n\n    /**\n     * @dev Safe token transfer function, just in case if rounding error\n     * causes pool to not have enough token balance.\n     */\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\n        uint256 balance = rewardToken.balanceOf(address(this));\n        if (_amount > balance) {\n            rewardToken.transfer(_to, balance);\n        } else {\n            rewardToken.transfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @dev it calculates (1 - fee) * amount\n     * Applies the fee by subtracting fees from the amount and returns\n     * the amount after deducting the fee.\n     */\n    function applyFee(uint256 _feeInBips, uint256 _amount) internal pure returns (uint256) {\n        return _amount.mul(FEE_BASE.sub(_feeInBips)).div(FEE_BASE);\n    }\n\n    /**\n     * @dev it calculates fee * amount\n     * Calculates the fee amount.\n     */\n    function calculateFee(uint256 _feeInBips, uint256 _amount) internal pure returns (uint256) {\n        return _amount.mul(_feeInBips).div(FEE_BASE);\n    }\n\n    /**\n     * @dev Get withdrawal fee in basis points for the user of the given pool.\n     */\n    function getWithdrawalFee(uint256 _pid, address _user) internal view returns (uint256) {\n        uint256 userTimestampDelta = getUserDelta(_pid, _user);\n\n        uint256 fee;\n\n        if (userTimestampDelta == 0 || userTimestampDelta <= timestampDeltaFeeStage[0]) {\n            //25% fee for withdrawals in the same timestamp to prevent abuse from flashloans\n            fee = feeStage[0];\n        } else if (userTimestampDelta > timestampDeltaFeeStage[0] && userTimestampDelta <= timestampDeltaFeeStage[1]) {\n            fee = feeStage[1];\n        } else if (userTimestampDelta > timestampDeltaFeeStage[1] && userTimestampDelta <= timestampDeltaFeeStage[2]) {\n            fee = feeStage[2];\n        } else if (userTimestampDelta > timestampDeltaFeeStage[2] && userTimestampDelta <= timestampDeltaFeeStage[3]) {\n            fee = feeStage[3];\n        } else if (userTimestampDelta > timestampDeltaFeeStage[3] && userTimestampDelta <= timestampDeltaFeeStage[4]) {\n            fee = feeStage[4];\n        }\n\n        return fee;\n    }\n\n    /**\n     * @dev Get user timestamp delta from last deposit timestamp to current timestamp.\n     */\n    function getUserDelta(uint256 _pid, address _user) internal view returns (uint256) {\n        UserInfo storage user = userInfo[_pid][_user];\n        if (user.lastWithdrawTimestamp > 0) {\n            uint256 estDelta = block.timestamp.sub(user.lastWithdrawTimestamp);\n            return estDelta;\n        } else {\n            uint256 estDelta = block.timestamp.sub(user.firstDepositTimestamp);\n            return estDelta;\n        }\n    }\n}\n'},
                                                             'SafeERC20.sol': {
                                                                 'content': '// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport "IERC20.sol";\nimport "Address.sol";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \'safeIncreaseAllowance\' and \'safeDecreaseAllowance\'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            "SafeERC20: approve from non-zero to non-zero allowance"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\n        // we\'re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n        }\n    }\n}\n'},
                                                             'IERC20.sol': {
                                                                 'content': "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},
                                                             'Address.sol': {
                                                                 'content': '// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        require(isContract(target), "Address: call to non-contract");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), "Address: static call to non-contract");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), "Address: delegate call to non-contract");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n'},
                                                             'SafeMath.sol': {
                                                                 'content': "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},
                                                             'Ownable.sol': {
                                                                 'content': '// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport "Context.sol";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n'},
                                                             'Context.sol': {
                                                                 'content': '// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n'}},
                         'settings': {'evmVersion': 'istanbul', 'optimizer': {'enabled': True, 'runs': 200}}},
 'contract_name': 'CraftTimeLock', 'compiler_version': '0.8.5+commit.a4f2e591', 'optimizer_enabled': True,
 'optimizer_runs': 200, 'license_identifier': 'UNLICENSED', 'bytecode_len': 19074}
